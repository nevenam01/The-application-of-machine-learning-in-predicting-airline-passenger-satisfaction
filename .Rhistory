data <- readRDS(file = "AnalizaISelekcija.RDS")
str(data)
table(data$Satisfaction)
#Neutral or Dissatisfied    Satisfied
#73452                       56428
#Train and Test
set.seed(123)
train.indices <- createDataPartition(data$Satisfaction, p = 0.8, list = FALSE)
train.data <- data[train.indices, ]
test.data <- data[-train.indices, ]
#Stablo 1 - nebalansirano, bez podesavanja hiper parametara
set.seed(123)
tree1 <- rpart(Satisfaction ~ ., data = train.data)
rpart.plot(tree1)
tree1.pred <- predict(tree1, newdata = test.data, type = "class")
cm1 <- table(true=test.data$Satisfaction,
predicted=tree1.pred)
cm1
eval1 <- compute_eval_metrics(cm1)
eval1
tr_ctrl <- trainControl(method = "repeatedcv", repeats = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
sampling = "down")
cp_grid <- expand.grid(.cp = seq(0.001, 0.01, 0.0025))
down <- train(x = train.data[,-19],
y = train.data$Satisfaction,
method = "rpart",
metric = "F",
trControl = tr_ctrl,
tuneGrid = cp_grid)
library(MLmetrics)
install.packages("MLmetrics")
library(caret)
library(ROSE)
library(rpart)
library(rpart.plot)
install.packages("MLmetrics")
install.packages("ModelMetrics")
install.packages("ModelMetrics")
install.packages("ModelMetrics")
install.packages("ModelMetrics")
install.packages("ModelMetrics")
library(ModelMetrics)
source("Util.R")
data <- readRDS(file = "AnalizaISelekcija.RDS")
str(data)
table(data$Satisfaction)
#Neutral or Dissatisfied    Satisfied
#73452                       56428
#Train and Test
set.seed(123)
train.indices <- createDataPartition(data$Satisfaction, p = 0.8, list = FALSE)
library(caret)
library(ROSE)
library(rpart)
library(rpart.plot)
library(ModelMetrics)
source("Util.R")
data <- readRDS(file = "AnalizaISelekcija.RDS")
str(data)
table(data$Satisfaction)
#Neutral or Dissatisfied    Satisfied
#73452                       56428
#Train and Test
set.seed(123)
train.indices <- createDataPartition(data$Satisfaction, p = 0.8, list = FALSE)
train.data <- data[train.indices, ]
test.data <- data[-train.indices, ]
#Stablo 1 - nebalansirano, bez podesavanja hiper parametara
set.seed(123)
tree1 <- rpart(Satisfaction ~ ., data = train.data)
rpart.plot(tree1)
tree1.pred <- predict(tree1, newdata = test.data, type = "class")
cm1 <- table(true=test.data$Satisfaction,
predicted=tree1.pred)
cm1
#                                       predicted
#true                      Neutral or Dissatisfied Satisfied
# Neutral or Dissatisfied                   12735      1955
# Satisfied                                  1451      9834
eval1 <- compute_eval_metrics(cm1)
eval1
#accuracy precision    recall        F1
#0.8688739 0.8341674 0.8714222 0.8523880
#rebalansiranje podataka koriscenjem kros-validacije - down-sampling metoda
tr_ctrl <- trainControl(method = "repeatedcv", repeats = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
sampling = "down")
cp_grid <- expand.grid(.cp = seq(0.001, 0.01, 0.0025))
set.seed(123)
down <- train(x = train.data[,-19],
y = train.data$Satisfaction,
method = "rpart",
metric = "F",
trControl = tr_ctrl,
tuneGrid = cp_grid)
library(caret)
library(ROSE)
library(rpart)
library(rpart.plot)
library(ModelMetrics)
source("Util.R")
data <- readRDS(file = "AnalizaISelekcija.RDS")
str(data)
table(data$Satisfaction)
#Neutral or Dissatisfied    Satisfied
#73452                       56428
#Train and Test
set.seed(123)
train.indices <- createDataPartition(data$Satisfaction, p = 0.8, list = FALSE)
train.data <- data[train.indices, ]
test.data <- data[-train.indices, ]
#Stablo 1 - nebalansirano, bez podesavanja hiper parametara
set.seed(123)
tree1 <- rpart(Satisfaction ~ ., data = train.data)
rpart.plot(tree1)
tree1.pred <- predict(tree1, newdata = test.data, type = "class")
cm1 <- table(true=test.data$Satisfaction,
predicted=tree1.pred)
cm1
#                                       predicted
#true                      Neutral or Dissatisfied Satisfied
# Neutral or Dissatisfied                   12735      1955
# Satisfied                                  1451      9834
eval1 <- compute_eval_metrics(cm1)
eval1
#accuracy precision    recall        F1
#0.8688739 0.8341674 0.8714222 0.8523880
#rebalansiranje podataka koriscenjem kros-validacije - down-sampling metoda
tctrl <- trainControl(method = "repeatedcv", repeats = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
sampling = "down")
cgrid <- expand.grid(.cp = seq(0.001, 0.01, 0.0025))
set.seed(123)
down <- train(x = train.data[,-19],
y = train.data$Satisfaction,
method = "rpart",
metric = "F",
trControl = tctrl,
tuneGrid = cgrid)
levels(data$Satisfaction)
levels(data$Satisfaction) <- make.names(levels(data$Satisfaction))
str(data)
library(caret)
library(ROSE)
library(rpart)
library(rpart.plot)
library(ModelMetrics)
source("Util.R")
data <- readRDS(file = "AnalizaISelekcija.RDS")
str(data)
table(data$Satisfaction)
#Neutral or Dissatisfied    Satisfied
#73452                       56428
levels(data$Satisfaction) <- make.names(levels(data$Satisfaction))
#Train and Test
set.seed(123)
train.indices <- createDataPartition(data$Satisfaction, p = 0.8, list = FALSE)
train.data <- data[train.indices, ]
test.data <- data[-train.indices, ]
#Stablo 1 - nebalansirano, bez podesavanja hiper parametara
set.seed(123)
tree1 <- rpart(Satisfaction ~ ., data = train.data)
rpart.plot(tree1)
library(caret)
library(ROSE)
library(rpart)
library(rpart.plot)
library(ModelMetrics)
source("Util.R")
data <- readRDS(file = "AnalizaISelekcija.RDS")
str(data)
table(data$Satisfaction)
#Neutral or Dissatisfied    Satisfied
#73452                       56428
levels(data$Satisfaction) <- make.names(levels(data$Satisfaction))
#Train and Test
set.seed(123)
train.indices <- createDataPartition(data$Satisfaction, p = 0.8, list = FALSE)
train.data <- data[train.indices, ]
test.data <- data[-train.indices, ]
#Stablo 1 - nebalansirano, bez podesavanja hiper parametara
set.seed(123)
tree1 <- rpart(Satisfaction ~ ., data = train.data)
rpart.plot(tree1)
View(data)
library(caret)
library(ROSE)
library(rpart)
library(rpart.plot)
library(ModelMetrics)
source("Util.R")
data <- readRDS(file = "AnalizaISelekcija.RDS")
str(data)
table(data$Satisfaction)
#Neutral or Dissatisfied    Satisfied
#73452                       56428
levels(data$Satisfaction) <- make.names(levels(data$Satisfaction))
#Train and Test
set.seed(123)
train.indices <- createDataPartition(data$Satisfaction, p = 0.8, list = FALSE)
train.data <- data[train.indices, ]
test.data <- data[-train.indices, ]
#Stablo 1 - nebalansirano, bez podesavanja hiper parametara
set.seed(123)
tree1 <- rpart(Satisfaction ~ ., data = train.data)
rpart.plot(tree1)
tree1.pred <- predict(tree1, newdata = test.data, type = "class")
cm1 <- table(true=test.data$Satisfaction,
predicted=tree1.pred)
cm1
eval1 <- compute_eval_metrics(cm1)
eval1
tctrl <- trainControl(method = "repeatedcv", repeats = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
sampling = "down")
tr_ctrl <- trainControl(method = "repeatedcv", repeats = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
sampling = "down")
cp_grid <- expand.grid(.cp = seq(0.001, 0.01, 0.0025))
set.seed(123)
down <- train(x = train.data[,-19],
y = train.data$Satisfaction,
method = "rpart",
metric = "F",
trControl = tr_ctrl,
tuneGrid = cp_grid)
down
down$bestTune$cp
tr_ctrl$sampling <- "up"
set.seed(123)
up <- train(x = train.data[,-19],
y = train.data$Satisfaction,
method = "rpart",
metric = "F",
trControl = tr_ctrl,
tuneGrid = cp_grid)
up
up$bestTune$cp
# 0.001
tr_ctrl$sampling <- "rose"
set.seed(123)
rose <- train(x = train.data[,-19],
y = train.data$Satisfaction,
method = "rpart",
metric = "F",
trControl = tr_ctrl,
tuneGrid = cp_grid)
rose$bestTune$cp#0.001
tr_ctrl$sampling <- NULL
set.seed(123)
original <- train(x = train.data[,-19],
y = train.data$Satisfaction,
method = "rpart",
metric = "F",
trControl = tr_ctrl,
tuneGrid = cp_grid)
original$bestTune$cp
optimal_cp <- 0.001
models <- list(original = original,
down = down,
up = up,
rose = rose)
resampling <- resamples(models)
summary(resampling, metric = "F")
models_list <- list(original = original, down = down, up = up, rose = rose)
lapply(models_list, function(mod) {
if (is.null(mod)) {
stop("Jedan od modela je NULL")
}
})
resampling <- resamples(models_list)
summary(resampling, metric = "F")
lapply(models_list, function(mod) {
if (is.null(mod)) {
stop("Jedan od modela je NULL")
}
})
lapply(models_list, function(mod) {
if (is.null(mod)) {
print("Jedan od modela je NULL")
}
})
print(tr_ctrl)
set.seed(123)
original_test <- train(x = train.data[,-19],
y = train.data$Satisfaction,
method = "rpart",
metric = "F",
trControl = trainControl(method = "repeatedcv", repeats = 5))
# Provera da li je model uspeÅ¡no treniran
if (!is.null(original_test)) {
print(original_test)
} else {
stop("Model treniranje bez rebalansiranja nije uspelo.")
}
library(caret)
library(ROSE)
library(rpart)
library(rpart.plot)
source("Util.R")
data <- readRDS(file = "AnalizaISelekcija.RDS")
str(data)
table(data$Satisfaction)
#Neutral or Dissatisfied    Satisfied
#73452                       56428
levels(data$Satisfaction) <- make.names(levels(data$Satisfaction))
#Train and Test
set.seed(123)
train.indices <- createDataPartition(data$Satisfaction, p = 0.8, list = FALSE)
train.data <- data[train.indices, ]
test.data <- data[-train.indices, ]
#Stablo 1 - nebalansirano, bez podesavanja hiper parametara##########################
set.seed(123)
tree1 <- rpart(Satisfaction ~ ., data = train.data)
rpart.plot(tree1)
tree1.pred <- predict(tree1, newdata = test.data, type = "class")
cm1 <- table(true=test.data$Satisfaction,
predicted=tree1.pred)
cm1
#                                       predicted
#true                      Neutral or Dissatisfied Satisfied
# Neutral or Dissatisfied                   12735      1955
# Satisfied                                  1451      9834
eval1 <- compute_eval_metrics(cm1)
eval1
#accuracy precision    recall        F1
#0.8688739 0.8341674 0.8714222 0.8523880
#rebalansiranje podataka koriscenjem kros-validacije - down-sampling metoda
tr_ctrl <- trainControl(method = "repeatedcv", repeats = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
sampling = "down")
cp_grid <- expand.grid(.cp = seq(0.0001, 0.01, 0.0025))
tr_ctrl_down <- trainControl(method = "repeatedcv", repeats = 5,
classProbs = TRUE, summaryFunction = twoClassSummary,
sampling = "down")
set.seed(123)
down_test <- train(x = train.data[,-19],
y = train.data$Satisfaction,
method = "rpart",
metric = "F",
trControl = tr_ctrl_down,
tuneGrid = cp_grid)
print(down_test)
down$bestTune$cp # 0.001
library(caret)
library(ROSE)
library(rpart)
library(rpart.plot)
source("Util.R")
data <- readRDS(file = "AnalizaISelekcija.RDS")
str(data)
table(data$Satisfaction)
#Neutral or Dissatisfied    Satisfied
#73452                       56428
levels(data$Satisfaction) <- make.names(levels(data$Satisfaction))
#Train and Test
set.seed(123)
train.indices <- createDataPartition(data$Satisfaction, p = 0.8, list = FALSE)
train.data <- data[train.indices, ]
test.data <- data[-train.indices, ]
#Stablo 1 - nebalansirano, bez podesavanja hiper parametara##########################
set.seed(123)
tree1 <- rpart(Satisfaction ~ ., data = train.data)
rpart.plot(tree1)
tree1.pred <- predict(tree1, newdata = test.data, type = "class")
cm1 <- table(true=test.data$Satisfaction,
predicted=tree1.pred)
cm1
#                                       predicted
#true                      Neutral or Dissatisfied Satisfied
# Neutral or Dissatisfied                   12735      1955
# Satisfied                                  1451      9834
eval1 <- compute_eval_metrics(cm1)
eval1
#accuracy precision    recall        F1
#0.8688739 0.8341674 0.8714222 0.8523880
#rebalansiranje podataka koriscenjem kros-validacije - down-sampling metoda
tr_ctrl <- trainControl(method = "repeatedcv", repeats = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
sampling = "down")
cp_grid <- expand.grid(.cp = seq(0.0001, 0.01, 0.0025))
set.seed(123)
down <- train(x = train.data[,-19],
y = train.data$Satisfaction,
method = "rpart",
metric = "F",
trControl = tr_ctrl,
tuneGrid = cp_grid)
down$bestTune$cp # 0.001
set.seed(123)
up <- train(x = train.data[,-19],
y = train.data$Satisfaction,
method = "rpart",
metric = "F",
trControl = tr_ctrl,
tuneGrid = cp_grid)
up
tr_ctrl$sampling <- "rose"
set.seed(123)
rose <- train(x = train.data[,-19],
y = train.data$Satisfaction,
method = "rpart",
metric = "F",
trControl = tr_ctrl,
tuneGrid = cp_grid)
warnings()
rose <- train(x = train.data[,-19],
y = train.data$Satisfaction,
method = "rpart",
metric = "ROC",
trControl = tr_ctrl,
tuneGrid = cp_grid)
tr_ctrl$sampling <- "rose"
set.seed(123)
rose <- train(x = train.data[,-19],
y = train.data$Satisfaction,
method = "rpart",
metric = "ROC",
trControl = tr_ctrl,
tuneGrid = cp_grid)
warnings()
rose
tr_ctrl$sampling <- NULL
set.seed(123)
original <- train(x = train.data[,-19],
y = train.data$Satisfaction,
method = "rpart",
metric = "ROC",
trControl = tr_ctrl,
tuneGrid = cp_grid)
original
models <- list(original = original,
down = down,
up = up,
rose = rose)
resampling <- resamples(models)
summary(resampling, metric = "ROC")
original$finalModel
rpart.plot(up_inside$finalModel)
rpart.plot(original$finalModel)
tree2.pred <- predict(object = original$finalModel, newdata = test.data, type = "class")
#Kreiranje matrice konfuzije
cm2 <- table(true=test.data$Label, predicted=tree2.pred)
original$finalModel
tree2.pred <- predict(object = original$finalModel, newdata = test.data, type = "class")
#Kreiranje matrice konfuzije
cm2 <- table(true=test.data$Satisfaction, predicted=tree2.pred)
cm2
tree1.eval <- compute.eval.metrics(tree1.cm)
tree2.eval <- compute.eval.metrics(cm2)
tree2.eval <- compute_eval_metrics(cm2)
tree2.eval
tree2.pred <- predict(original$finalModel, newdata = test.data, type = "class")
cm2 <- table(true = test.data$Satisfaction, predicted = tree2.pred)
cm2
tree2.eval <- compute.eval.metrics(tree2.cm)
tree2.eval <- compute.eval.metrics(cm2)
tree2.eval <- compute_eval_metrics(cm2)
tree2.eval
#poredjenje stabala
data.frame(rbind(tree1.eval, tree2.eval),
row.names = c(paste("Stablo_", 1:2, sep = "")))
library(caret)
library(ROSE)
library(rpart)
library(rpart.plot)
source("Util.R")
data <- readRDS(file = "AnalizaISelekcija.RDS")
str(data)
table(data$Satisfaction)
#Neutral or Dissatisfied    Satisfied
#73452                       56428
#Da bi Neutral or Dissatisfied predvorilo u Neutral.or.Dissatisfied
levels(data$Satisfaction) <- make.names(levels(data$Satisfaction))
#Trening i Test
set.seed(123)
train.indices <- createDataPartition(data$Satisfaction, p = 0.8, list = FALSE)
train.data <- data[train.indices, ]
test.data <- data[-train.indices, ]
#Stablo 1 - nebalansirano, bez podesavanja hiper parametara##########################
set.seed(123)
tree1 <- rpart(Satisfaction ~ ., data = train.data)
rpart.plot(tree1)
tree1.pred <- predict(tree1, newdata = test.data, type = "class")
cm1 <- table(true=test.data$Satisfaction,
predicted=tree1.pred)
cm1
#                                       predicted
#true                      Neutral or Dissatisfied Satisfied
# Neutral or Dissatisfied                   12735      1955
# Satisfied                                  1451      9834
tree1.eval <- compute_eval_metrics(cm1)
tree1.eval
#accuracy precision    recall        F1
#0.8688739 0.8341674 0.8714222 0.8523880
tree2.pred <- predict(object = original$finalModel, newdata = test.data, type = "class")
#Kreiranje matrice konfuzije
cm2 <- table(true=test.data$Satisfaction, predicted=tree2.pred)
cm2
tree2.eval <- compute_eval_metrics(cm2)
tree2.eval
#poredjenje stabala
data.frame(rbind(tree1.eval, tree2.eval),
row.names = c(paste("Stablo_", 1:2, sep = "")))
